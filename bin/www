#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ProjectLiveQA:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/*
// MONGODB
var mongoose = require('mongoose');

    // connection
mongoose.connect('mongodb://localhost/hellothere', function(err){
    if(err){
        console.log(err);
    }else{
        console.log("Connected to mongodb!");
    }
});
*/
var dbConfig = require('../db');
var mongoose = require('mongoose');


   // schema
var topicSchema = mongoose.Schema({
    
    topic: String,
 
});

var replySchema = mongoose.Schema({
    name: String,
    reply: String,
    questionid: String
});

    // model
var topic = mongoose.model('Topic', topicSchema);
var Reply = mongoose.model('Reply', replySchema);

// SOCKETS
var io = require('socket.io').listen(server);

io.sockets.on('connection', function(socket){

        // query messages, haal alle topics uit databank, behalve laatste toegevoegd.
    topic.find({}, function(err, docs){
        if(err) throw err;
        socket.emit('load old topics', docs);
    });
    
    //recieving new message from client
  socket.on('send message', function(data){
        console.log("server received a topic");
        
        // inserting in mongodb
        var newtopic = new topic({topic: data});
        newtopic.save(function(err){
        if(err) throw err;
        
        // send topic to ALL clients
    io.sockets.emit('new message', data);
    console.log("nieuw topic toegevoegd: " + data);
     });
    });



    /*
    //recieving reply from client
    socket.on('send reply', function(data){
        console.log("server received a reply");
        var questionID = data.questionid.substring(9,20);
        
        // inserting in mongodb
        var newReply = new Reply({name: data.name, reply: data.reply, questionid: questionID});
        newReply.save(function(err){
        if(err) throw err;
        
        // send reply to ALL clients
    io.sockets.emit('new reply', data);
     });
    });
*/


});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
